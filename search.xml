<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572463034798&di=1e4faef096eced7d9b73c232faf52832&imgtype=0&src=http%3A%2F%2Fwww.dachuantuan.com%2Fuploadfile%2F2018%2F0511%2F20180511014224667.png" alt="hello" />

<p>首先，恭喜自己有了一个属于自己的博客 , 哈哈 !</p>
<a id="more"></a>

<p>本人是一位在北漂的苦逼爬虫程序员(建议其他程序员不要走这条路 , 太坑了 , 稍有不慎还容易进去) , 之前也有在新浪博客和CSDN上面写过博客 , 当时体验都不是很好 , 终于经过这几天的折腾自己搭建了一个博客 , 域名还没有想好 , 后面想好了再弄 。</p>
<p>个人觉得每个程序员都应该有一个属于自己的博客，一个是对知识点和工作中遇到的坑进行整理，再一个有一个自己的博客在面试的时候也是一个很好的加分项，所以建一个自己的博客，并且进行认真的打理还是很有必要的，让我们为了更加美好的明天而努力吧，加油。</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>hexo博客优化之Next主题加载优化性能提升</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/kw/wallhaven-kwr321.jpg" alt="head"></p>
<p>基于Github-pages搭建的Next主题的Hexo博客要怎么优化呢？</p>
<a id="more"></a>

<h3 id="主题源加载优化"><a href="#主题源加载优化" class="headerlink" title="主题源加载优化"></a>主题源加载优化</h3><p>把在NexT主题的_config.yml里面的：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"># <span class="built_in">Uri</span> of fonts host. E.g. <span class="comment">//fonts.googleapis.com (Default)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">host:</span></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"># <span class="built_in">Uri</span> of fonts host. E.g. <span class="comment">//fonts.googleapis.com (Default)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">host: <span class="comment">//fonts.lug.ustc.edu.cn</span></span></pre></td></tr></table></figure>

<p>因为<code>fonts.lug.ustc.edu.cn</code>是中科大的源，相比之前能快一下</p>
<h3 id="博客双线部署"><a href="#博客双线部署" class="headerlink" title="博客双线部署"></a>博客双线部署</h3><p><a href="https://www.ieclipse.cn/2016/08/29/Web/Hexo-deploy-lines/" target="_blank" rel="noopener">参考文章地址</a></p>
<h3 id="压缩网页静态资源"><a href="#压缩网页静态资源" class="headerlink" title="压缩网页静态资源"></a>压缩网页静态资源</h3><p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener">参考文章地址</a><br> <a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat插件github地址</a></p>
<p>常规的做法是使用<code>gulp</code>来进行压缩，每次压缩时还需要输入额外的命令，比较繁琐</p>
<h3 id="配置hexo-neat压缩插件"><a href="#配置hexo-neat压缩插件" class="headerlink" title="配置hexo-neat压缩插件"></a>配置hexo-neat压缩插件</h3><h4 id="在站点根目录下安装hexo-neat"><a href="#在站点根目录下安装hexo-neat" class="headerlink" title="在站点根目录下安装hexo-neat"></a>在站点根目录下安装hexo-neat</h4><p>博客目录下运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span></pre></td></tr></table></figure>

<p>如果报错，选择克隆插件，然后手动复制到插件目录里面<code>hexo目录\node_modules\</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/rozbo/hexo-neat</span></span></pre></td></tr></table></figure>

<h4 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a>站点配置文件添加相关配置</h4><p>配置信息添加到博客目录文件夹下的<code>hexo目录\_config.yml</code>的末尾，可以安装自己的需求去自定义配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 博文压缩</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">neat_enable: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩html</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">neat_html:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  exclude:</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩css  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">neat_css:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  exclude:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/*.min.css'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">neat_js:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  mangle: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  output:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  compress:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exclude:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/*.min.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/jquery.fancybox.pack.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/index.js'</span></span></pre></td></tr></table></figure>

<h3 id="报错及相应解决"><a href="#报错及相应解决" class="headerlink" title="报错及相应解决"></a>报错及相应解决</h3><p><a href="https://blog.csdn.net/dataiyangu/article/details/84963491" target="_blank" rel="noopener">参考文章地址</a></p>
<h4 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h4><p>如果按照官方插件的文档说明来配置exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">neat_css:</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">exclude:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/*.min.css'</span></span></pre></td></tr></table></figure>

<h4 id="压缩html时不要跳过-md文件"><a href="#压缩html时不要跳过-md文件" class="headerlink" title="压缩html时不要跳过.md文件"></a>压缩html时不要跳过.md文件</h4><p>.md文件就是我们写文章时的markdown文件，如果跳过压缩.md文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>
<h4 id="压缩html时不要跳过-swig文件"><a href="#压缩html时不要跳过-swig文件" class="headerlink" title="压缩html时不要跳过.swig文件"></a>压缩html时不要跳过.swig文件</h4><p>.swig文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>
<h4 id="点击的桃心效果消失"><a href="#点击的桃心效果消失" class="headerlink" title="点击的桃心效果消失"></a>点击的桃心效果消失</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">neat_js:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  mangle: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  output:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  compress:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exclude:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/*.min.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/jquery.fancybox.pack.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/index.js'</span>  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="string">'**/love.js'</span></span></pre></td></tr></table></figure>

<p>gitalk js文件报错<br> 在上面的代码底部加入如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- <span class="string">'**/comments.gitalk.js'</span></span></pre></td></tr></table></figure>

<h4 id="jquery-pjax-min-js报错"><a href="#jquery-pjax-min-js报错" class="headerlink" title="jquery pjax min js报错"></a>jquery pjax min js报错</h4><p>我这里的 jquery pjax min js是指的加入pjax前需要以来的两个cdn文件，一个是jq，一个是它，我将它下载到了本地，不要在意这些细节~<br> 同样加入如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- <span class="string">'**/jquery_pjax_min_js.js'</span></span></pre></td></tr></table></figure>


<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p><a href="http://www.zhaojun.im/hexo-lazyload/" target="_blank" rel="noopener">参考文章地址</a></p>
<p>懒加载，在需要的时候才加载图片，而不是一次性加载完整个页面的图片<br> 使用<code>lazyload</code>插件，适用于本地图片很多的情况</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在<code>Hexo</code>博客目录下，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span></pre></td></tr></table></figure>

<p>然后在你的 <code>Hexo</code>目录的配置文件 <code>_config.yml</code> 中添加配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lazyload:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment"># className: #可选 e.g. .J-lazyload-img</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment"># loadingImg: #可选 eg. ./images/loading.png</span></span></pre></td></tr></table></figure>

<p>参数：<br> <code>loadingImg</code> - 图片未加载时的代替图</p>
<p>默认路径: <code>/js/lazyload-plugin/loading.svg</code><br> 如果需要自定义，添填入 <code>loading</code> 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。</p>
<p><code>className</code> - 需要延迟加载的图片 <code>class</code>选择器</p>
<p>默认会延迟加载文章中的所有图片。<br> 如果不为空，请填入需要延迟加载的图片<code>class</code> 选择器</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客优化之解决国外域名在国内访问慢的问题</title>
    <url>/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%A4%96%E5%9F%9F%E5%90%8D%E5%9C%A8%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/11/18/NL1xzr3U6ZKO8sR.jpg" alt="wallhaven-ox7gm9.jpg"></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>目前我使用的是国外域名<strong>NameSilo</strong>，由于是直接使用的域名注册商的解析，所以会出现在国内直接访问的话，打开速度慢的问题，所以我们需要将<strong>NameSilo</strong>域名解析到DNSPod，以提升访问速度。</p>
<a id="more"></a>

<h2 id="注册DNSPod账号"><a href="#注册DNSPod账号" class="headerlink" title="注册DNSPod账号"></a>注册DNSPod账号</h2><p> 在<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod官网</a>注册账号 ，进行登录，选择<strong>DNS管理</strong>下的<strong>我的域名</strong>，点击添加域名，添加之前购买的<strong>NameSilo</strong>域名，然后确定。</p>
<p><img src="https://i.loli.net/2019/11/18/eTsnxFuVtaQBgNJ.png" alt="image.png"></p>
<p>添加之后点击添加的域名，会看到DNSPod提供的两条默认的NS记录</p>
<p><img src="https://i.loli.net/2019/11/18/LXjtJf41kqiWrKa.png" alt="image.png"></p>
<h2 id="修改Namesilo"><a href="#修改Namesilo" class="headerlink" title="修改Namesilo"></a>修改Namesilo</h2><p> 登录我们的<strong>Namesilo</strong>，选择Manage My Domains，进入域名管理页面。勾选你的域名，点击选项栏中的Change Nameservers。</p>
<p><img src="https://i.loli.net/2019/11/18/Dzn2uw68QdGpesX.png" alt="image.png"></p>
<p> 将 <strong>NameServer 1</strong>， <strong>NameServer 2</strong> 改为DNSPod提供的两条NS记录，删除第三条NS记录，点击提交。 </p>
<p><img src="https://i.loli.net/2019/11/18/pSVWfbYRimzn1kB.png" alt="image.png"></p>
<p>打开Namesilo的DNS<a href="https://www.namesilo.com/account_domain_manage_dns.php" target="_blank" rel="noopener">管理页面</a> 删除默认的A记录和CNAME记录 。</p>
<p><strong>NameServer</strong> 的修改需要一段时间，会在一到48小时生效 。</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p> 打开Git Bash或cmd命令行控制台，输入： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping yourname.github.io</span></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/11/18/yoE1szkZWI9Kvtx.png" alt="image.png"></p>
<p> 返回结果为自己博客站点的IP地址。 </p>
<p>登录进入DNSPod的域名控制台，选择要解析的域名，添加如下解析内容： </p>
<p><img src="https://i.loli.net/2019/11/18/T62mja5yRVCMnuL.png" alt="image.png"></p>
<p> 解析时，记录类型选A或CNAME，A记录的记录值为上一步得到的IP地址，CNAME记录的记录值为你的Github Pages博客域名。同时添加两条记录可保证无论是否添加www都可以访问。</p>
<p>最后只要等待 DNSPOD 的DNS解析和 Namesilo 的NameServer生效后即可使用。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>解决json的value中含有双引号导致解析错误的问题</title>
    <url>/%E8%A7%A3%E5%86%B3json%E7%9A%84value%E4%B8%AD%E5%90%AB%E6%9C%89%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%AF%BC%E8%87%B4%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p> <img src="https://w.wallhaven.cc/full/ey/wallhaven-eyv8po.jpg" alt="General 1920x1280 Joker movies artwork Joaquin Phoenix Joker (2019 Movie)"> </p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在爬虫中经常会遇到一下json格式的数据需要进行解析，但是如果这段json中value中含有双引号的话就会导致解析错误，报错遗漏数据的情况。</p>
<a id="more"></a>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>出现这种情况的话最好的办法当然是从源头进行解决，比如对value中的双引号进行转义或者替换成中文状态下的双引号进行解决，如果是其他场景比如是通过单位同事传过来的json数据的话，就可以让同事传的时候进行处理一下。</p>
<p>但是如果数据是通过爬虫采集回来的话就不能从源头处理了，只能自己进行二次处理。</p>
<p>下面的就是因为value中含有双引号导致的JsonPath解析错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.jayway.jsonpath.InvalidJsonException: net.minidev.json.parser.ParseException: Unexpected token 中 at position <span class="number">411</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at com.jayway.jsonpath.spi.json.JsonSmartJsonProvider.parse(JsonSmartJsonProvider.java:<span class="number">64</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at com.jayway.jsonpath.internal.ParseContextImpl.parse(ParseContextImpl.java:<span class="number">37</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at com.jayway.jsonpath.JsonPath.parse(JsonPath.java:<span class="number">599</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at casia.isiteam.hongkong_forum.service.HongKongTask.run(HongKongTask.java:<span class="number">72</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Caused by: net.minidev.json.parser.ParseException: Unexpected token 中 at position <span class="number">411</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readObject(JSONParserBase.java:<span class="number">567</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readMain(JSONParserBase.java:<span class="number">403</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readArray(JSONParserBase.java:<span class="number">273</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readMain(JSONParserBase.java:<span class="number">406</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readObject(JSONParserBase.java:<span class="number">546</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readMain(JSONParserBase.java:<span class="number">403</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readObject(JSONParserBase.java:<span class="number">546</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readMain(JSONParserBase.java:<span class="number">403</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readObject(JSONParserBase.java:<span class="number">546</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.readFirst(JSONParserBase.java:<span class="number">301</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserBase.parse(JSONParserBase.java:<span class="number">158</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParserString.parse(JSONParserString.java:<span class="number">58</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at net.minidev.json.parser.JSONParser.parse(JSONParser.java:<span class="number">271</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        at com.jayway.jsonpath.spi.json.JsonSmartJsonProvider.parse(JsonSmartJsonProvider.java:<span class="number">62</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ... <span class="number">4</span> more</span></pre></td></tr></table></figure>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>可以通过以下方法进行处理一下，通过把value中的双引号替换成中文状态的双引号进行解决，如果你有更好的解决方法，欢迎评论与我分享！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">jsonString</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">char</span>[] temp = s.toCharArray();		</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">int</span> n = temp.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">if</span>(temp[i]==<span class="string">':'</span>&amp;&amp;temp[i+<span class="number">1</span>]==<span class="string">'"'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						<span class="keyword">for</span>(<span class="keyword">int</span> j =i+<span class="number">2</span>;j&lt;n;j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							<span class="keyword">if</span>(temp[j]==<span class="string">'"'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">								<span class="keyword">if</span>(temp[j+<span class="number">1</span>]!=<span class="string">','</span> &amp;&amp;  temp[j+<span class="number">1</span>]!=<span class="string">'&#125;'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">									temp[j]=<span class="string">'”'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">								&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[j+<span class="number">1</span>]==<span class="string">','</span> ||  temp[j+<span class="number">1</span>]==<span class="string">'&#125;'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">									<span class="keyword">break</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">								&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">							&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">						&#125;	</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;		</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String(temp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>疑难问题</tag>
      </tags>
  </entry>
  <entry>
    <title>解决远程桌面无法拷贝文件的问题</title>
    <url>/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%97%A0%E6%B3%95%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/zx/wallhaven-zxz7qy.png" alt="image.png"></p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>今天在通过系统自带的远程桌面备份ADSL机器上的程序的时候遇到有一台机器在远程的机器什么互相拷贝问题是没有问题的，只是不能通过远程机器拷贝到本地！解决之后记录一下方法。</p>
<a id="more"></a>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="检查本地"><a href="#检查本地" class="headerlink" title="检查本地"></a>检查本地</h4><p>​    首先需要检查远程桌面链接的剪切板设置是否开启</p>
<p><img src="https://i.loli.net/2019/11/13/I6HbOhXncxsd1k4.png" alt="image.png"></p>
<h4 id="检查服务器"><a href="#检查服务器" class="headerlink" title="检查服务器"></a>检查服务器</h4><p>​    打开任务管理器，重启<strong>rdpclip.exe进程</strong></p>
<p><img src="https://i.loli.net/2019/11/13/Bj5tlENVXm2FIGZ.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2019/11/13/l1yEsxmdrGU286e.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2019/11/13/pCd7s2J1WNUmo8t.png" alt="image.png"></p>
<p>重启完<strong>rdpclip.exe进程</strong>问题就解决了，可以继续工作了。</p>
]]></content>
      <tags>
        <tag>疑难问题</tag>
      </tags>
  </entry>
  <entry>
    <title>东京压缩</title>
    <url>/%E4%B8%9C%E4%BA%AC%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p> <img src="https://w.wallhaven.cc/full/48/wallhaven-483d6y.jpg" alt="动漫1600x1074地铁火车站动漫"> </p>
<p> &emsp;  &emsp; 德国出生的摄影师Michael Wolf认为乘坐东京地铁太过拥挤，犹如一场噩梦，他常常看到因为车厢人太多，乘客的脸被挤到贴着玻璃，十分恐怖。Michael以此为灵感，创作了一组摄影作品，名为“东京压缩”（Tokyo compression ）。 </p>
<a id="more"></a>

<p> <img src="http://travel.cntv.cn/20121123/images/1353638733513_3377314736818010852.jpg" alt="img"> </p>
<p> <img src="http://travel.cntv.cn/20121123/images/1353638733572_7069221447340987798.jpg" alt="img"> </p>
<p> <img src="http://travel.cntv.cn/20121123/images/1353638733580_2438716151345937923.jpg" alt="img"> </p>
<p> <img src="http://travel.cntv.cn/20121123/images/1353638737753_8766706081247849810.jpg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/2e53388c85a4427f85bb96e9207e46e3_th.jpeg" alt="img"> </p>
<p> <img src="http://travel.cntv.cn/20121123/images/1353638737800_17020954063596027083.jpg" alt="img"> </p>
<p> <img src="http://travel.cntv.cn/20121123/images/1353638737808_13932521147299976870.jpg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/8187487d0b484ca2a537020b2acc94c1_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/5f81242f7e8d44f28d285a3b1457f3f3_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/03b05e5b21f74c4b8a023975d45465a8_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/e0199a0571784c6ab349ae9d1622ee1f_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/d64dc6fe225e457ba41bb1edb00ea4bf_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/7858e6f314004ce6a482e0cf6ef0a058_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/6faa926a13a64256a49adb3ff034850c_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/3909030629a44019b63c52626a137854_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/12fafa87f1c648cd9c786e5a6962911c_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/8bb4857e5dde4b4580512185f9908c85_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/1dfcccd9f89c4d119053a1578e6299bd_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/a5492b78c10e472d872a0b7045a084a8_th.jpeg" alt="img"> </p>
<p> <img src="http://img.mp.itc.cn/upload/20170407/c8c6166d7f654b7c8ee8b78ab49cd71a_th.jpeg" alt="img"> </p>
<p>想起了被昌平线支配的恐惧。。。</p>
]]></content>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>使用轻量级工具处理emoji表情</title>
    <url>/%E4%BD%BF%E7%94%A8%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%B7%A5%E5%85%B7%E5%A4%84%E7%90%86emoji%E8%A1%A8%E6%83%85/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/zm/wallhaven-zmvgkj.jpg" alt="封面"></p>
<p><strong>场景：</strong>在爬虫工作中经常会遇到带有emoji表情的数据，存入到MySQL库的时候会出错，当然可以通过更改表的编码为 ‘<em>utf8mb4</em>’ 解决问题，但是大部分时间是不允许直接更改数据库的，所以就需要进行转换一下。</p>
<a id="more"></a>

<blockquote>
<p> github地址：<a href="https://github.com/vdurmont/emoji-java" target="_blank" rel="noopener">https://github.com/vdurmont/emoji-java</a> </p>
</blockquote>
<h3 id="获取maven依赖"><a href="#获取maven依赖" class="headerlink" title="获取maven依赖"></a>获取maven依赖</h3><p>目前该工具最新版本是4.0.0，依赖如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;com.vdurmont&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;emoji-java&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;5.1.1&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="To-aliases（把表情转换成别名）"><a href="#To-aliases（把表情转换成别名）" class="headerlink" title="To aliases（把表情转换成别名）"></a>To aliases（把表情转换成别名）</h4><p>To replace all the emoji’s unicodes found in a string by their aliases, use <code>EmojiParser#parseToAliases(String)</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"An 😀awesome 😃string with a few 😉emojis!"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">String result = EmojiParser.parseToAliases(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(result);</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;An :grinning:awesome :smiley:string with a few :wink:emojis!&quot;</span></pre></td></tr></table></figure>

<h4 id="To-html（把表情转换成html-可以直接在前端显示）"><a href="#To-html（把表情转换成html-可以直接在前端显示）" class="headerlink" title="To html（把表情转换成html,可以直接在前端显示）"></a>To html（把表情转换成html,可以直接在前端显示）</h4><p>To replace all the emoji’s unicodes found in a string by their html representation, use <code>EmojiParser#parseToHtmlDecimal(String)</code>or <code>EmojiParser#parseToHtmlHexadecimal(String)</code>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"An 😀awesome 😃string with a few 😉emojis!"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">String resultDecimal = EmojiParser.parseToHtmlDecimal(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(resultDecimal);</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;An &amp;#128512;awesome &amp;#128515;string with a few &amp;#128521;emojis!&quot;</span></pre></td></tr></table></figure>

<h4 id="To-unicode-把表情的别名或者HTML转成表情"><a href="#To-unicode-把表情的别名或者HTML转成表情" class="headerlink" title="To unicode(把表情的别名或者HTML转成表情)"></a>To unicode(把表情的别名或者HTML转成表情)</h4><p>To replace all the aliases and the html representations found in a string by their unicode, use <code>EmojiParser#parseToUnicode(String)</code>. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"An :grinning:awesome :smiley:string &amp;#128516;with a few :wink:emojis!"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">String result = EmojiParser.parseToUnicode(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(result);</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;An 😀awesome 😃string 😄with a few 😉emojis!&quot;</span></pre></td></tr></table></figure>

<h4 id="Remove-emojis-移除所有emoji表情"><a href="#Remove-emojis-移除所有emoji表情" class="headerlink" title="Remove emojis( 移除所有emoji表情 )"></a>Remove emojis( 移除所有emoji表情 )</h4><p><code>EmojiParser#removeAllEmojis(String)</code>: removes all the emojis from the String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"An 😀awesome 😃string with a few 😉emojis!"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(EmojiParser.removeAllEmojis(str));</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;An awesome string with a few emojis!&quot;</span></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>文中只列出了部分的功能方法，还有更多方法比如，<em>选择性的移除</em>或者<em>从字符串中提取表情符号</em>等功能，就留给大家自己探索了</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>emoji</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法介绍</title>
    <url>/Markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/wy/wallhaven-wyw8wr.jpg" alt="封面"></p>
<p><em>原文博客地址</em>：<a href="https://github.com/younghz/Markdown#1-markdown是什么" target="_blank" rel="noopener">Markdown语法</a></p>
<h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown是什么？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>
<a id="more"></a>

<h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. 谁创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/亚伦·斯沃茨" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>
<p>他有着足以让你跪拜的人生经历：</p>
<ul>
<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>
<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>
<li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。</li>
<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>
<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>
<li><strong>2013</strong>年1月自杀身亡。</li>
</ul>
<p><a href="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" target="_blank" rel="noopener"><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></a></p>
<p>天才都有早逝的归途。</p>
<h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. 为什么要使用它？</h3><ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. 怎么使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>Markdown语法主要分为如下几大部分： <strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p>
<h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote>
<p>2）使用<code>#</code>，可表示1-6级标题。</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>&gt; 区块引用<br>&gt;&gt; 嵌套引用</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>
<p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p>
<p>代码区块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    printf(&quot;Hello, Markdown.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体<em>，</em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+<em>） 第一项 -（+</em>） 第二项 - （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项</p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>
<h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" target="_blank" rel="noopener" title="Markdown">younghz的Markdown库</a>。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https://github.com/younghz/://github.com/younghz/Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" target="_blank" rel="noopener" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" target="_blank" rel="noopener" title="Markdown">younghz的Markdown库2</a></p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https://github.com/younghz/://github.com/younghz/Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https://github.com/younghz/://github.com/younghz/Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>
<h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl+a</span></pre></td></tr></table></figure>
</blockquote>
<p>效果：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl+a</span></pre></td></tr></table></figure>
</blockquote>
<h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p>
<ul>
<li>GitHub</li>
<li>简书</li>
<li>Stack Overflow</li>
<li>Apollo</li>
<li>Moodle</li>
<li>Reddit</li>
<li>等等</li>
</ul>
<h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul>
<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>
<li><strong>在线</strong>的dillinger.io评价也不错</li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>
<li><strong>Linux</strong>下的ReText不错。</li>
</ul>
<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。 虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber] (<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>
<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>
<table>
<thead>
<tr>
<th>代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td>MarkDownCopy</td>
<td><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td>
</tr>
</tbody></table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>markdown</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下vi和vim有什么区别</title>
    <url>/Linux%E4%B8%8Bvi%E5%92%8Cvim%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/dg/wallhaven-dgv8qo.png" alt="封面"></p>
<p> *<em>vim是vi的增强版，完全兼容vi。vim优势主要体现在以下几个方面:  *</em></p>
<a id="more"></a>

<ol>
<li>多级撤消<br>我们知道在vi里，按u只能撤消上次命令，而在vim里可以无限制的撤消。</li>
<li>易用性<br>vi只能运行于unix类中，而vim不仅可以运行 于unix,windows ,mac等多操作平台。</li>
<li>语法加亮<br>vim可以用不同的颜色来加亮你的代码。</li>
<li>可视化操作<br>就是说vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。</li>
<li>对vi的完全兼容<br>某些情况下，你可以把vim当成vi来使用。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text添加到鼠标右键菜单的教程方法</title>
    <url>/Sublime%20Text%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E7%9A%84%E6%95%99%E7%A8%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://w.wallhaven.cc/full/j5/wallhaven-j5k825.jpg" alt="封面"></p>
<p><strong>情景</strong>：我们在安装的 Sublime Text 后发现没有右键菜单 ， 打开一些文件不是很方便 ， 下面是我的方法，希望有所帮助！</p>
<a id="more"></a>

<ol>
<li><p>win+R打开运行，输入regedit ，确定，打开注册表</p>
<p><img src="https://i.loli.net/2019/10/30/jMV1KXmpDYtSJkv.png" alt="未命名1572450399.png"></p>
</li>
<li><p>依次找到HKEY_CLASSESS_ROOT-&gt;*-&gt;Shell，下面新建项，命名为sublime Text。 </p>
<p><img src="https://i.loli.net/2019/10/30/ZKwgMSDzip3LVRu.png" alt="新建项"></p>
</li>
<li><p>然后点击新建的项sublime Text，双击默认设置数值数据为：用Sublime Text打开，再右键新建字符串命名为Icon，设置数值数据为：Sublime的路径 + ,0</p>
<img src="https://i.loli.net/2019/10/30/KM2Y8WtRyINslwL.png" alt="image.png" style="zoom:80%;" />
</li>
<li><p>在左边的sublime Text下面新建一个项，命名为Command，然后点击Command，把右边默认的数值数据设置为：Sublime的路径 + %1</p>
<img src="https://i.loli.net/2019/10/31/FxLb5gEuyXHPGVs.png" alt="image.png" style="zoom:80%;" />
</li>
<li><p>到这里就设置完成了，关闭注册表，找个文件测试一下吧！</p>
</li>
</ol>
<p><img src="https://i.loli.net/2019/10/31/DgtCKQbIsB8j7mM.png" alt="image.png"></p>
<hr>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
</search>
